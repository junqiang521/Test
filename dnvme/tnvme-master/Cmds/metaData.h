/*
 * Copyright (c) 2011, Intel Corporation.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

#ifndef _METADATA_H_
#define _METADATA_H_

#include "tnvme.h"
#include "dnvme.h"
#include "prpData.h"
#include "../Singletons/metaRsrc.h"
#include "../Singletons/memBuffer.h"
#include "../Utils/fileSystem.h"


/**
* This class is the interface for the meta data buffer associated with the MPTR
* entry of a cmd. According to the NVME spec, meta data memory can only be
* contiguous as it is handed off to a NVME device. However, user space apps
* want access to this memory as RW, but user space allocated memory is not
* guaranteed to be contiguous if it crosses page boundaries. The maximum
* size of meta data is allowed to be 16KB, and thus could cross page boundaries.
* Therefore meta data memory is allocated contiguously in the kernel and mmap'd
* back into user space for RW accesses.
*
* Meta data buffers are separated into 2 components. The controlling component
* is located in RsrcMngr. Please see RsrcMngr class header for those details.
* The working component is this class. This class requests meta data buffers
* from the RsrcMngr. After a buffer is allocated it will and must be inserted
* into the cmd. If no meta data buffers are desired, then don't allocate one.
* Meta data buffers are reserved and solely associated with the cmd for the
* entire lifetime of that cmd.
*
* @note This class may throw exceptions.
*/
class MetaData
{
public:
    MetaData();
    virtual ~MetaData();

    /**
     * Request dnvme to allocate a contiguous meta data buffer which will be
     * mmap'd back into user space for RW access. Remember all meta data buffers
     * are forced to be of equal size until such time the ctrlr becomes
     * disabled and a new size can be set by method RsrcMngr::SetMetaAllocSize()
     */
    void AllocMetaBuffer();

    /**
     * This method will return a previously allocated meta data buffer from a
     * call to AllocBuffer() for RW user space access. If no meta data buffer
     * has been allocated, then no meta data buffer will be associated with
     * this cmd.
     * @return The pointer to the memory, otherwise NULL indicates that no meta
     *      data buffer is in use/allocated.
     */
    uint8_t *GetMetaBuffer() { return mMetaData.buf; }
    uint32_t GetMetaBufferSize() const { return mMetaData.size; }
    uint32_t GetMetaBufferID() const { return mMetaData.ID; }

    /// Solely used to notify dnvme how to issue a PRP data buffer
    send_64b_bitmask GetMetaBitmask() const;

    /// Returns the direction of data transfer for the PRP buffer
    virtual DataDir GetDataDir() const = 0;

    /**
     * Append the entire contents of this cmd's meta data to the named file.
     * @param filename Pass the filename as generated by macro
     *      FileSystem::PrepDumpFile().
     * @param fileHdr Pass a custom file header description to dump
     */
    void Dump(DumpFilename filename, string fileHdr) const;

    /**
     * Write a data pattern to a segment of the meta data buffer. This segment
     * is defined by the offset from the start of the meta data buffer and
     * continues 'patLength' bytes. This segment is the only portion affected.
     * This segment starts with the stated initial value and progress according
     * to the desired pattern/series.
     * @param dataPat Pass the desired data pattern/series to calc next value
     * @param initVal Pass the 1st value of the pattern/series
     * @param offset Pass offset into the meta buf which is start of the segment
     * @param length Pass the number of bytes of the segment length, value
     *        of UINT32_MAX implies infinite length.
     */
    void SetMetaDataPattern(DataPattern dataPat, uint64_t initVal = 0,
        uint32_t offset = 0, uint32_t length = UINT32_MAX);

    /**
     * Compare a specified MemBuffer to this one.
     * @param compTo Pass a reference to the memory to compare against
     * @return true upon all data exactly identical, false is miscompare, and
     *      throws when buffers are not of same size or other serious error
     *      which causes the inability to compare data.
     */
    bool CompareMetaBuffer(SharedMemBufferPtr compTo);

private:
    MetaDataBuf mMetaData;
};


#endif
