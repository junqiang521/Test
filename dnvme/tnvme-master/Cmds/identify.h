/*
 * Copyright (c) 2011, Intel Corporation.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

#ifndef _IDENTIFY_H_
#define _IDENTIFY_H_

#include "cmd.h"
#include "identifyDefs.h"


class Identify;    // forward definition
typedef boost::shared_ptr<Identify>             SharedIdentifyPtr;
typedef boost::shared_ptr<const Identify>       ConstSharedIdentifyPtr;
#define CAST_TO_IDENTIFY(shared_trackable_ptr)  \
        boost::dynamic_pointer_cast<Identify>(shared_trackable_ptr);


/**
* This class implements the Identify admin cmd
*
* @note This class may throw exceptions.
*/
class Identify : public Cmd
{
public:
    Identify();
    virtual ~Identify();

    /// Used to compare for NULL pointers being returned by allocations
    static SharedIdentifyPtr NullIdentifyPtr;
    static const uint8_t Opcode;
    /// The perfectly sized data buffer should be of this size
    static const uint16_t IDEAL_DATA_SIZE;

    /**
     * Set which structure of data to retrieve from the DUT.
     * @note See base class for access to the NSID field if passing false
     * @param ctrlr Pass true for controller, otherwise false for namespace
     */
    void SetCNS(uint8_t ctrlr);
    uint8_t GetCNS() const;

    void SetCNTID(uint16_t cntid);
    uint16_t GetCNTID() const;

    /**
     * Retrieve the specified PRP payload parameter. If the value can fit within
     * an uint64_t then it will be returned, otherwise it will throw.
     * Additionally, the correct data structure must be backing this cmd or
     * it will also throw.
     * @param field Pass which struct field to return
     * @return The value if it fits, otherwise will throw either if too large,
     *         or the incorrect data structure is backing this cmd.
     */
    uint64_t GetValue(IdCtrlrCap field) const;
    uint64_t GetValue(IdNamespc field) const;

    /**
     * If this cmd's payload contains a namespace data structure, then this
     * method uses FLBAS field to lookup and return the active LBA format.
     * @return The requested data, otherwise throws
     */
    LBAFormat GetLBAFormat() const;

    /**
     * If this cmd's payload contains a namespace data structure, then this
     * method uses GetLBAFormat() to calc and return the active LBA data size.
     * @return The correctly calc'd data, otherwise throws
     */
    uint64_t GetLBADataSize() const;

    /**
     * If this cmds' payload contains a ctrlr data structure, then this method
     * uses the MDTS field and the CAP.MPSMIN to calc and return the maximum
     * data xfer size supported.
     * @return The correctly calc'd max xfer size; 0 indicates no limitation
     *         upon xfer size, otherwise throws
     */
    uint32_t GetMaxDataXferSize() const;

    /**
     * Append the entire contents of this cmds' contents, any PRP payload,
     * and any meta data it may contain to the named file.
     * @param filename Pass the filename as generated by macro
     *      FileSystem::PrepDumpFile().
     * @param fileHdr Pass a custom file header description to dump
     */
    virtual void Dump(DumpFilename filename, string fileHdr) const;

    /**
     * Log the given field using the LOG_NRM macro from tnvme.h.
     * @param field the field whose value should be printed
     */
    virtual void log(IdCtrlrCap field) const;

    /**
     * Log the given field using the LOG_NRM macro from tnvme.h.
     * @param field the field whose value should be printed
     */
    virtual void log(IdNamespc field) const;

    /**
     * Get the power state descriptor (PSD) for the given power state number.
     * throws if psdNum is greater than idCtrlrCap.NPSS
     * @param psdNum the number of the PSD to retrieve
     */
    IdPowerStateDescUnpacked getPSD(const uint8_t psdNum) const;

    bool isZeroFilled(void) const;


private:
    /// Details the fields within the identify controller capabilities struct
    static IdentifyDataType mIdCtrlrCapMetrics[];
    /// Details the fields within the identify namespace struct
    static IdentifyDataType mIdNamespcType[];


    /// General functions to support the more specific public versions
    uint64_t GetValue(int field, IdentifyDataType *idData) const;
    void Dump(FILE *fp, int field, IdentifyDataType *idData) const;
    void getStr(const IdentifyDataType idData, string *const work) const;
};


#endif
